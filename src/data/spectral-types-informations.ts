import { Kelvin, mkKelvin } from '../measures/kelvin';
import { isError, map, raise, Validated } from '../utils/validated';

const spectralTypeToKelvin: Array<[string, number]> = [
  ['O5', 54],
  ['O6', 45],
  ['O7', 43.3],
  ['O8', 40.6],
  ['O9', 37.8],
  ['B0', 29.2],
  ['B1', 23.0],
  ['B2', 21.0],
  ['B3', 17.6],
  ['B5', 15.2],
  ['B6', 14.3],
  ['B7', 13.5],
  ['B8', 12.3],
  ['B9', 11.4],
  ['A0', 9600],
  ['A1', 9330],
  ['A2', 9040],
  ['A3', 8750],
  ['A4', 8480],
  ['A5', 8310],
  ['A7', 7920],
  ['F0', 7350],
  ['F2', 7050],
  ['F3', 6850],
  ['F5', 6700],
  ['F6', 6550],
  ['F7', 6400],
  ['F8', 6300],
  ['G0', 6050],
  ['G1', 5930],
  ['G2', 5800],
  ['G5', 5660],
  ['G8', 5440],
  ['K0', 5240],
  ['K1', 5110],
  ['K2', 4960],
  ['K3', 4800],
  ['K4', 4600],
  ['K5', 4400],
  ['K7', 4000],
  ['M0', 3750],
  ['M1', 3700],
  ['M2', 3600],
  ['M3', 3500],
  ['M4', 3400],
  ['M5', 3200],
  ['M6', 3100],
  ['M7', 2900],
  ['M8', 2700],
  ['L0', 2600],
  ['L3', 2200],
  ['L8', 1500],
  ['T2', 1400],
  ['T6', 1000],
  ['T8', 800],
  ['G5', 5010],
  ['G8', 4870],
  ['K0', 4720],
  ['K1', 4580],
  ['K2', 4460],
  ['K3', 4210],
  ['K4', 4010],
  ['K5', 3780],
  ['M0', 3660],
  ['M1', 3600],
  ['M2', 3500],
  ['M3', 3300],
  ['M4', 3100],
  ['M5', 2950],
  ['M6', 2800],
  ['B0', 21],
  ['B1', 16],
  ['B2', 14],
  ['B3', 12.8],
  ['B5', 11.5],
  ['B6', 11],
  ['B7', 10.5],
  ['B8', 10.0],
  ['B9', 9700],
  ['A0', 9400],
  ['A1', 9100],
  ['A2', 8900],
  ['A5', 8300],
  ['F0', 7500],
  ['F2', 7200],
  ['F5', 6800],
  ['F8', 6150],
  ['G0', 5800],
  ['G2', 5500],
  ['G5', 5100],
  ['G8', 5050],
  ['K0', 4900],
  ['K1', 4700],
  ['K2', 4500],
  ['K3', 4300],
  ['K4', 4100],
  ['K5', 3750],
  ['M0', 3660],
  ['M1', 3600],
  ['M2', 3500],
  ['M3', 3300],
  ['M4', 3100],
  ['M5', 2950],
];
const spectralTypeTable: { [key: string]: Kelvin } = spectralTypeToKelvin
  .map(([spectralType, value]) => map(mkKelvin(value), (kelvin) => [spectralType, kelvin]))
  .reduce((acc, pair) => {
    if (isError(pair)) {
      return acc;
    } else {
      return { ...acc, [pair[0]]: pair[1] };
    }
  }, {});

export function findTemperatureOf(spectralType: string): Validated<Kelvin> {
  const spectralTypePrincipal = spectralType.substr(0, 2);
  return (
    spectralTypeTable[spectralTypePrincipal] || raise(`Could not find the temperature of spectral type ${spectralType}`)
  );
}
